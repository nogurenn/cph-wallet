// Code generated by mockery v2.9.4. DO NOT EDIT.

package transaction

import (
	dbutil "github.com/nogurenn/cph-wallet/dbutil"
	mock "github.com/stretchr/testify/mock"

	transaction "github.com/nogurenn/cph-wallet/transaction"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// BeginTxn provides a mock function with given fields:
func (_m *Repository) BeginTxn() (dbutil.Transaction, error) {
	ret := _m.Called()

	var r0 dbutil.Transaction
	if rf, ok := ret.Get(0).(func() dbutil.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbutil.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccount provides a mock function with given fields: txn, account
func (_m *Repository) CreateAccount(txn dbutil.Transaction, account transaction.Account) error {
	ret := _m.Called(txn, account)

	var r0 error
	if rf, ok := ret.Get(0).(func(dbutil.Transaction, transaction.Account) error); ok {
		r0 = rf(txn, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateEntriesForTransactionId provides a mock function with given fields: txn, transactionId, entries
func (_m *Repository) CreateEntriesForTransactionId(txn dbutil.Transaction, transactionId uuid.UUID, entries []transaction.Entry) error {
	ret := _m.Called(txn, transactionId, entries)

	var r0 error
	if rf, ok := ret.Get(0).(func(dbutil.Transaction, uuid.UUID, []transaction.Entry) error); ok {
		r0 = rf(txn, transactionId, entries)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransaction provides a mock function with given fields: txn, _a1
func (_m *Repository) CreateTransaction(txn dbutil.Transaction, _a1 transaction.Transaction) error {
	ret := _m.Called(txn, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(dbutil.Transaction, transaction.Transaction) error); ok {
		r0 = rf(txn, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountByUsername provides a mock function with given fields: txn, username
func (_m *Repository) GetAccountByUsername(txn dbutil.Transaction, username string) (*transaction.Account, error) {
	ret := _m.Called(txn, username)

	var r0 *transaction.Account
	if rf, ok := ret.Get(0).(func(dbutil.Transaction, string) *transaction.Account); ok {
		r0 = rf(txn, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dbutil.Transaction, string) error); ok {
		r1 = rf(txn, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccounts provides a mock function with given fields: txn
func (_m *Repository) GetAccounts(txn dbutil.Transaction) ([]transaction.Account, error) {
	ret := _m.Called(txn)

	var r0 []transaction.Account
	if rf, ok := ret.Get(0).(func(dbutil.Transaction) []transaction.Account); ok {
		r0 = rf(txn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dbutil.Transaction) error); ok {
		r1 = rf(txn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsByName provides a mock function with given fields: txn, name
func (_m *Repository) GetTransactionsByName(txn dbutil.Transaction, name string) ([]transaction.Transaction, error) {
	ret := _m.Called(txn, name)

	var r0 []transaction.Transaction
	if rf, ok := ret.Get(0).(func(dbutil.Transaction, string) []transaction.Transaction); ok {
		r0 = rf(txn, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dbutil.Transaction, string) error); ok {
		r1 = rf(txn, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockTransactions provides a mock function with given fields: txn
func (_m *Repository) LockTransactions(txn dbutil.Transaction) error {
	ret := _m.Called(txn)

	var r0 error
	if rf, ok := ret.Get(0).(func(dbutil.Transaction) error); ok {
		r0 = rf(txn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
